//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/BattlesTacticInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BattlesTacticInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BattlesTacticInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BattlesTacticInputAction"",
    ""maps"": [
        {
            ""name"": ""BattleTacticIA"",
            ""id"": ""66fc1df6-cf77-4cc0-bd91-c6a78850baf8"",
            ""actions"": [
                {
                    ""name"": ""NavigationDown"",
                    ""type"": ""Button"",
                    ""id"": ""5fb8f67f-c189-4eae-87c6-bae36631f586"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavigationUp"",
                    ""type"": ""Button"",
                    ""id"": ""58052473-b7a3-4a0b-bf57-5d2902cfb213"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavigationLeft"",
                    ""type"": ""Button"",
                    ""id"": ""23c0a4e0-5780-46bc-a134-262114221e56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavigationRight"",
                    ""type"": ""Button"",
                    ""id"": ""6e99b716-5456-4c40-abb5-ed844bc25433"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""24132756-3ccc-4042-b422-e1c8841da0d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""1368f1e0-376c-4e56-86de-1c7618f6c3bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCameraRight"",
                    ""type"": ""Button"",
                    ""id"": ""9b830d68-d3f0-4211-9aa9-624de3b7317b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCameraLeft"",
                    ""type"": ""Button"",
                    ""id"": ""01f74269-ed2b-402e-9d33-779dc9436ac3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3c9ba874-b368-42e1-930a-fd3955b3e51e"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigationDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""100dcb7d-1bed-440c-a106-425c355236aa"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigationUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""836dc354-924f-4dea-b49c-806205edd3ae"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigationLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b74db4a4-872a-4d7f-8d46-dc758c6b240e"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigationRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""749191f0-4333-4f5f-9ffe-391ec51f03ec"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff85586a-33e9-4d50-ae57-db5695fb3f13"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCameraRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""214e3947-ab20-4310-8212-f55345c37916"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCameraLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c12c6ea-b576-40d7-8f10-e7499af2c68d"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BattleTacticIA
        m_BattleTacticIA = asset.FindActionMap("BattleTacticIA", throwIfNotFound: true);
        m_BattleTacticIA_NavigationDown = m_BattleTacticIA.FindAction("NavigationDown", throwIfNotFound: true);
        m_BattleTacticIA_NavigationUp = m_BattleTacticIA.FindAction("NavigationUp", throwIfNotFound: true);
        m_BattleTacticIA_NavigationLeft = m_BattleTacticIA.FindAction("NavigationLeft", throwIfNotFound: true);
        m_BattleTacticIA_NavigationRight = m_BattleTacticIA.FindAction("NavigationRight", throwIfNotFound: true);
        m_BattleTacticIA_Select = m_BattleTacticIA.FindAction("Select", throwIfNotFound: true);
        m_BattleTacticIA_Back = m_BattleTacticIA.FindAction("Back", throwIfNotFound: true);
        m_BattleTacticIA_RotateCameraRight = m_BattleTacticIA.FindAction("RotateCameraRight", throwIfNotFound: true);
        m_BattleTacticIA_RotateCameraLeft = m_BattleTacticIA.FindAction("RotateCameraLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BattleTacticIA
    private readonly InputActionMap m_BattleTacticIA;
    private List<IBattleTacticIAActions> m_BattleTacticIAActionsCallbackInterfaces = new List<IBattleTacticIAActions>();
    private readonly InputAction m_BattleTacticIA_NavigationDown;
    private readonly InputAction m_BattleTacticIA_NavigationUp;
    private readonly InputAction m_BattleTacticIA_NavigationLeft;
    private readonly InputAction m_BattleTacticIA_NavigationRight;
    private readonly InputAction m_BattleTacticIA_Select;
    private readonly InputAction m_BattleTacticIA_Back;
    private readonly InputAction m_BattleTacticIA_RotateCameraRight;
    private readonly InputAction m_BattleTacticIA_RotateCameraLeft;
    public struct BattleTacticIAActions
    {
        private @BattlesTacticInputAction m_Wrapper;
        public BattleTacticIAActions(@BattlesTacticInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @NavigationDown => m_Wrapper.m_BattleTacticIA_NavigationDown;
        public InputAction @NavigationUp => m_Wrapper.m_BattleTacticIA_NavigationUp;
        public InputAction @NavigationLeft => m_Wrapper.m_BattleTacticIA_NavigationLeft;
        public InputAction @NavigationRight => m_Wrapper.m_BattleTacticIA_NavigationRight;
        public InputAction @Select => m_Wrapper.m_BattleTacticIA_Select;
        public InputAction @Back => m_Wrapper.m_BattleTacticIA_Back;
        public InputAction @RotateCameraRight => m_Wrapper.m_BattleTacticIA_RotateCameraRight;
        public InputAction @RotateCameraLeft => m_Wrapper.m_BattleTacticIA_RotateCameraLeft;
        public InputActionMap Get() { return m_Wrapper.m_BattleTacticIA; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleTacticIAActions set) { return set.Get(); }
        public void AddCallbacks(IBattleTacticIAActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleTacticIAActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleTacticIAActionsCallbackInterfaces.Add(instance);
            @NavigationDown.started += instance.OnNavigationDown;
            @NavigationDown.performed += instance.OnNavigationDown;
            @NavigationDown.canceled += instance.OnNavigationDown;
            @NavigationUp.started += instance.OnNavigationUp;
            @NavigationUp.performed += instance.OnNavigationUp;
            @NavigationUp.canceled += instance.OnNavigationUp;
            @NavigationLeft.started += instance.OnNavigationLeft;
            @NavigationLeft.performed += instance.OnNavigationLeft;
            @NavigationLeft.canceled += instance.OnNavigationLeft;
            @NavigationRight.started += instance.OnNavigationRight;
            @NavigationRight.performed += instance.OnNavigationRight;
            @NavigationRight.canceled += instance.OnNavigationRight;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
            @RotateCameraRight.started += instance.OnRotateCameraRight;
            @RotateCameraRight.performed += instance.OnRotateCameraRight;
            @RotateCameraRight.canceled += instance.OnRotateCameraRight;
            @RotateCameraLeft.started += instance.OnRotateCameraLeft;
            @RotateCameraLeft.performed += instance.OnRotateCameraLeft;
            @RotateCameraLeft.canceled += instance.OnRotateCameraLeft;
        }

        private void UnregisterCallbacks(IBattleTacticIAActions instance)
        {
            @NavigationDown.started -= instance.OnNavigationDown;
            @NavigationDown.performed -= instance.OnNavigationDown;
            @NavigationDown.canceled -= instance.OnNavigationDown;
            @NavigationUp.started -= instance.OnNavigationUp;
            @NavigationUp.performed -= instance.OnNavigationUp;
            @NavigationUp.canceled -= instance.OnNavigationUp;
            @NavigationLeft.started -= instance.OnNavigationLeft;
            @NavigationLeft.performed -= instance.OnNavigationLeft;
            @NavigationLeft.canceled -= instance.OnNavigationLeft;
            @NavigationRight.started -= instance.OnNavigationRight;
            @NavigationRight.performed -= instance.OnNavigationRight;
            @NavigationRight.canceled -= instance.OnNavigationRight;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
            @RotateCameraRight.started -= instance.OnRotateCameraRight;
            @RotateCameraRight.performed -= instance.OnRotateCameraRight;
            @RotateCameraRight.canceled -= instance.OnRotateCameraRight;
            @RotateCameraLeft.started -= instance.OnRotateCameraLeft;
            @RotateCameraLeft.performed -= instance.OnRotateCameraLeft;
            @RotateCameraLeft.canceled -= instance.OnRotateCameraLeft;
        }

        public void RemoveCallbacks(IBattleTacticIAActions instance)
        {
            if (m_Wrapper.m_BattleTacticIAActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleTacticIAActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleTacticIAActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleTacticIAActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleTacticIAActions @BattleTacticIA => new BattleTacticIAActions(this);
    public interface IBattleTacticIAActions
    {
        void OnNavigationDown(InputAction.CallbackContext context);
        void OnNavigationUp(InputAction.CallbackContext context);
        void OnNavigationLeft(InputAction.CallbackContext context);
        void OnNavigationRight(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
        void OnRotateCameraRight(InputAction.CallbackContext context);
        void OnRotateCameraLeft(InputAction.CallbackContext context);
    }
}
